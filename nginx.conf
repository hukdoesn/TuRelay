# HTTP 服务器配置
server {
    listen 80;                       # 监听 IPv4 的 80 端口
    listen [::]:80;                  # 监听 IPv6 的 80 端口
    server_name admin.ext4.cn;       # 服务器域名
    # 将所有 HTTP 请求重定向到 HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS 服务器配置
server {
    # SSL 端口监听配置
    listen 443 ssl http2;            # 监听 IPv4 的 443 端口，启用 SSL 和 HTTP/2
    listen [::]:443 ssl http2;       # 监听 IPv6 的 443 端口，启用 SSL 和 HTTP/2
    server_name admin.ext4.cn;       # 服务器域名

    # SSL 证书配置
    ssl_certificate /etc/nginx/ssl/admin.ext4.cn.pem;        # SSL 证书文件路径
    ssl_certificate_key /etc/nginx/ssl/admin.ext4.cn.key;    # SSL 私钥文件路径
    ssl_session_timeout 1d;          # SSL 会话超时时间为 1 天
    ssl_session_cache shared:SSL:50m;# SSL 会话缓存配置，使用共享内存，大小为 50MB
    ssl_session_tickets off;         # 禁用 SSL 会话票证
    ssl_protocols TLSv1.2 TLSv1.3;   # 只允许 TLS 1.2 和 1.3 版本

    # 加密套件配置
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;   # 不优先使用服务器的加密套件

    # HSTS 安全头配置
    add_header Strict-Transport-Security "max-age=63072000" always;  # 强制客户端使用 HTTPS 访问

    # 开启gzip压缩
    gzip on;
    gzip_static on;                   # 开启静态gzip预压缩
    gzip_min_length 1k;              # 小于1k的文件不压缩
    gzip_buffers 4 4k;               # 调整缓冲区大小，适应内存限制
    gzip_comp_level 5;               # 压缩级别调整为4，平衡CPU消耗
    gzip_types
        application/javascript
        application/x-javascript
        text/javascript
        text/css
        text/xml
        application/json
        application/x-httpd-php
        image/jpeg
        image/gif
        image/png
        image/svg+xml
        font/ttf
        font/otf
        font/x-woff
        application/vnd.ms-fontobject
        application/font-woff
        application/font-woff2;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.";

    # 前端应用代理配置
    location / {
        proxy_pass http://127.0.0.1:8080;  # 代理到前端开发服务器
        
        # 设置代理头部，传递客户端信息
        proxy_set_header Host $host;                    # 传递原始主机名
        proxy_set_header X-Real-IP $remote_addr;        # 传递客户端真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 传递代理链路上的IP
        proxy_set_header X-Forwarded-Proto $scheme;     # 传递协议类型(http/https)

        # WebSocket 支持配置
        proxy_set_header Upgrade $http_upgrade;         # 支持 WebSocket 协议升级
        proxy_set_header Connection "upgrade";          # 保持连接为升级状态
    }

    # 后端 API 代理配置
    location /api/ {
        proxy_pass http://127.0.0.1:8100/api/;         # 代理到后端 API 服务器
        
        # 设置代理头部，确保后端能获取到真实客户端信息
        proxy_set_header Host $host;                    # 传递原始主机名
        proxy_set_header X-Real-IP $remote_addr;        # 传递客户端真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 传递代理链路上的IP
        proxy_set_header X-Forwarded-Proto $scheme;     # 传递协议类型
        proxy_set_header X-Forwarded-Host $host;        # 传递原始主机名
        proxy_set_header X-Forwarded-Port $server_port; # 传递原始端口
    }

    # WebSocket SSH 连接代理配置
    location /ws/ssh/ {
        proxy_pass http://127.0.0.1:8100/ws/ssh/;      # 代理到 WebSocket 服务器
        
        # WebSocket 必要的头部配置
        proxy_http_version 1.1;                         # 使用 HTTP/1.1 协议
        proxy_set_header Upgrade $http_upgrade;         # 支持 WebSocket 协议升级
        proxy_set_header Connection "upgrade";          # 保持连接为升级状态
        
        # 传递客户端信息
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # 静态文件和安全配置
    location = /favicon.ico { 
        access_log off;              # 关闭访问日志
        log_not_found off;           # 不记录 404 错误日志
    }       
    location = /robots.txt  { 
        access_log off;              # 关闭访问日志
        log_not_found off;           # 不记录 404 错误日志
    }      

    # 错误页面配置
    error_page 404 /404.html;                  # 404 错误页面
    error_page 500 502 503 504 /50x.html;      # 服务器错误页面
    location = /50x.html {
        root /usr/share/nginx/html;            # 错误页面文件位置
    }
} 